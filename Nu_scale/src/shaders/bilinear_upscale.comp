#version 450

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

// Input/output buffers
layout(set = 0, binding = 0) buffer InputBuffer {
    uint data[];
} inputBuffer;

layout(set = 0, binding = 1) buffer OutputBuffer {
    uint data[];
} outputBuffer;

// Push constants for dimensions
layout(push_constant) uniform PushConstants {
    uint inputWidth;
    uint inputHeight;
    uint outputWidth;
    uint outputHeight;
} constants;

// Helper function to get RGB values from buffer
vec3 getRGB(uint index) {
    uint value = inputBuffer.data[index / 4];
    uint offset = (index % 4) * 8;
    
    uint r = (value >> offset) & 0xFF;
    uint g = (value >> (offset + 8)) & 0xFF;
    uint b = (value >> (offset + 16)) & 0xFF;
    
    return vec3(float(r) / 255.0, float(g) / 255.0, float(b) / 255.0);
}

// Helper function to set RGB values in buffer
void setRGB(uint index, vec3 color) {
    uint r = uint(clamp(color.r * 255.0, 0.0, 255.0));
    uint g = uint(clamp(color.g * 255.0, 0.0, 255.0));
    uint b = uint(clamp(color.b * 255.0, 0.0, 255.0));
    
    uint value = (r) | (g << 8) | (b << 16);
    outputBuffer.data[index / 4] = value;
}

// Bilinear interpolation function
vec3 bilinearInterpolate(float x, float y) {
    uint x0 = uint(floor(x));
    uint y0 = uint(floor(y));
    uint x1 = min(x0 + 1, constants.inputWidth - 1);
    uint y1 = min(y0 + 1, constants.inputHeight - 1);
    
    float dx = x - float(x0);
    float dy = y - float(y0);
    
    // Get pixel values at the four corners
    vec3 p00 = getRGB((y0 * constants.inputWidth + x0) * 3);
    vec3 p10 = getRGB((y0 * constants.inputWidth + x1) * 3);
    vec3 p01 = getRGB((y1 * constants.inputWidth + x0) * 3);
    vec3 p11 = getRGB((y1 * constants.inputWidth + x1) * 3);
    
    // Interpolate along x
    vec3 p0 = mix(p00, p10, dx);
    vec3 p1 = mix(p01, p11, dx);
    
    // Interpolate along y
    return mix(p0, p1, dy);
}

void main() {
    // Get global position
    uvec2 gPos = gl_GlobalInvocationID.xy;
    
    // Check if within output dimensions
    if (gPos.x >= constants.outputWidth || gPos.y >= constants.outputHeight) {
        return;
    }
    
    // Calculate corresponding position in input image
    float x = float(gPos.x) * float(constants.inputWidth) / float(constants.outputWidth);
    float y = float(gPos.y) * float(constants.inputHeight) / float(constants.outputHeight);
    
    // Get interpolated color
    vec3 color = bilinearInterpolate(x, y);
    
    // Write to output buffer
    uint outputIndex = (gPos.y * constants.outputWidth + gPos.x) * 3;
    setRGB(outputIndex, color);
} 